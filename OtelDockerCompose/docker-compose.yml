version: "3.3"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - '9092:9092'
      - '9101:9101'
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      - zookeeper

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.15
    hostname: elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: always
    environment:
      - discovery.type=single-node
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - eslog:/usr/share/elasticsearch/logs
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:9200/_cluster/health || exit 1"]
      interval: 20s
      timeout: 20s
      retries: 3

  # Using Logstash to import logs
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.15
    hostname: logstash
    container_name: logstash
    ports:
      - "5000:5000"
    restart: always
    volumes:
      - ./src/elasticsearch/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    command: logstash -f /usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch

  # Using Kibana to work with logs
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.15
    hostname: kibana
    container_name: kibana
    ports:
      - "5601:5601"
    restart: always
    environment:
      SERVER_NAME: "kibana"
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    depends_on:
      - elasticsearch

  jaeger-collector:
    image: jaegertracing/jaeger-collector
    hostname: jaeger-collector
    container_name: jaeger-collector
    command:
      - "--collector.otlp.enabled=true"
      - "--log-level=debug"
    ports:
      - 62096:4317        # 4317 gRPC Accepts traces in OpenTelemetry OTLP format (Protobuf).
      - 4318:4318         # 4318 http Accepts traces in OpenTelemetry OTLP formatâ€‰(Protobuf and JSON).
      - 14268:14268
      - 14250:14250       # 14250 gRPC Used by jaeger-agent to send spans
      - 14269:14269
    restart: always
    environment:
      - SPAN_STORAGE_TYPE=kafka
      - KAFKA_PRODUCER_BROKERS=kafka:29092
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:14269/ || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      kafka:
        condition: service_healthy

  jaeger-ingester:
    image: jaegertracing/jaeger-ingester
    hostname: jaeger-ingester
    container_name: jaeger-ingester
    restart: always
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - KAFKA_CONSUMER_BROKERS=kafka:29092
      - KAFKA_TOPIC=jaeger-spans
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:14270/ || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
      jaeger-collector:
        condition: service_healthy

  jaeger-query:
    image: jaegertracing/jaeger-query:latest
    container_name: jaeger-query
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    ports:
      - "16686:16686"
      - "16687"
    restart: always
    command:
      - "--query.base-path=/jaeger/ui"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:16687/ || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Otel Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    hostname: otel-collector
    container_name: otel-collector
    ports:
      - "1888:1888"       # pprof extension
      - "8888:8888"       # Prometheus metrics exposed by the collector
      - "8889:8889"       # Prometheus exporter metrics
      - "13133:13133"     # health_check extension
      - "4317:4317"       # OTLP gRPC receiver
      # - "4318:4318"       # OTLP http receiver
      - "55679:55679"     # zpages extension
    restart: always
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-observability.yml", "--config=/etc/otelcol-config-extras.yml" ]
    volumes:
      - ./src/otelcollector/otelcol-config.yaml:/etc/otelcol-config.yml
      - ./src/otelcollector/otelcol-observability.yaml:/etc/otelcol-observability.yml
      - ./src/otelcollector/otelcol-config-extras.yaml:/etc/otelcol-config-extras.yml
    deploy:
      resources:
        limits:
          memory: 125M
    depends_on:
      - jaeger-collector

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    restart: always
    volumes:
      - prometheus_data:/prometheus
      - ./src/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    deploy:
      resources:
        limits:
          memory: 300M
  
  # Using Grphana to monitor Jaeger services
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: grafana
    ports:
        - "3000:3000"
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
      - ./src/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./src/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    depends_on:
        - prometheus
        - loki

  #Grafana/Loki
  loki:
    image: grafana/loki:latest
    hostname: loki
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./src/grafana/loki/loki-config.yaml:/etc/loki/loki-config.yaml
    command: 
      - '--config.file=/etc/loki/loki-config.yaml'

  # SQL server
  db-mssql:
    image: "mcr.microsoft.com/mssql/server:2022-latest"
    hostname: db-mssql
    container_name: mssql-server
    ports:
        - "5434:1433"
    environment:
        SA_PASSWORD: "@Oteldemo123"
        ACCEPT_EULA: "Y"
    volumes:
      - mssql:/var/opt/mssql

  # kafka schema registry
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # Using Kafka REST Proxy to have a REST API needed by various UI
  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:latest
    hostname: kafka-rest-proxy
    container_name: kafka-rest-proxy
    ports:
      - "8082:8082"
    restart: always
    environment:
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    depends_on:
      - kafka
      - schema-registry

  # Using Kafka Topics UI to monitor Kafka streams
  kafka-ui:
    image: landoop/kafka-topics-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    ports:
      - "8000:8000"
    environment:
      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082"
      PROXY: "true"
    depends_on:
      - kafka-rest-proxy

volumes:
  esdata:
  eslog:
  grafana_data:
  loki_data:
  prometheus_data:
  mssql: